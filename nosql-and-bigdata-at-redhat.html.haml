---
title: NoSQL & Big Data at Red Hat
author: Emmanuel Bernard, Manik Surtani
description: An overview of NoSQL and BigData in the Red Hat ecosystem

layout: reveal
---

%section
  %img.splash(src="#{site.base_url}/images/summit.png")

%section
  %h2 NoSQL & Big Data at Red Hat
  %br
  %p June 2012
  %ul.intro
    %li 
      Manik Surtani 
      %ul 
        %li Hacker, Red Hat, Inc.
    %li 
      Emmanuel Bernard 
      %ul
        %li Hacker too, Red Hat, Inc.

%section
  %h2 Middleware is plumbing
  %blockquote
    :markdown
      Middleware is about assembling pipes of data together.

      In an hour, you should have an good overview of Red Hat's plumbing offering
      around NoSQL and Big Data. We will also discuss specific examples.

%section
  :markdown
    ## Emmanuel Bernard

    - Serial OSS entrepreneur
      - Hibernate {ORM|Search|OGM|Validator}
      - Ceylon
    - Standardizer
    - Podcaster
      - <http://asylum.jboss.org>
      - <http://lescastcodeurs.com>
    - Contact
      - [@emmanuelbernard](http://twitter/emmanuelbernard) on Twitter
      - <http://emmanuelbernard.com>

%section
  :markdown
    ## Manik Surtani
    
    - Data grids
      - Founder and Project Lead, Infinispan
      - JBoss Data Grid Platform Architect
    - Standards
      - Spec Lead, JSR 347
      - Expert group member, JSR 107
    - Contact
      - [@maniksurtani](http://twitter/maniksurtani) on Twitter
      - <http://blog.infinispan.org>
      - <http://manik.surtani.org>

%section
  :markdown
    ## Agenda 

    - What is NoSQL?
    - Landscape of data storage
    - The JBoss data technology
    - Exploring 4 use cases
  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/writing-in-agenda.gif', :width=>'500', :style=>'position: absolute; left: 600px; top: 10px;'}

%section
  :markdown
    ## A brief history of storage

    - Disk space was once expensive!
    - RDBMS normal forms
    - Based on relational set theory
      - Strong mathematical background
  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/hdd.png', :width=>'500', :style=>'position: absolute; left: 600px; top: 10px; border:0; background: transparent; -webkit-box-shadow:0 0 0px; box-shadow: 0 0 0px;'}

%section
  :markdown
    ## But the world has changed!

      - Disks are cheap!
        - ... so is memory.
      - High availability and scalability are important
        - pushed further by cloud
      - Relational model never sat well with OOP anyway
        - Hence the (very useful) _hack_ that we call ORM
  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/RobotEvolution.gif', :width=>'400'}

%section
  :markdown
    ## Scaling RDBMSs are _hard_

    - The relational model was not designed to be distributed
    - Maintaining coherence and consistency is very hard
    - You can only go so far scaling vertically
      - At some point you need to scale horizontally  

  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/difficult.jpeg', :width=>'400'}  

%section
  :markdown
    ## Pacemakers to the RDBMS

    - Caches (local or distributed)
      - Only helps scale reads, not writes
    - Sharding
      - Pushes a lot of complexity into the application
      - Cross-shard queries become problematic
  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/wheelchair.jpeg', :width=>'400'}

%section
  :markdown
    ## Why do people use NoSQL?

    - Horizontal scalability
      - Scale capacity
      - Scale performance    
    - High availability
      - If distributed
    - Flexible (soft) schema
      - Often denormalized
  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/nosql.png',
               :style=>'position:absolute; top: 100px; left: 600px;'}

%section
  :markdown
    ## Consistency models

    - Strong (transactional)
      - RDBMSs
      - Data Grids
    - Eventual
      - Many NoSQL engines
      - Some data grids
    - Eric Brewer's CAP theorem
  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/consistency.png',
               :style=>'position:absolute; top: 100px; left: 600px;', :width=>'300'}


%section 
  :markdown
    ## The (No)SQL landscape

    Like New Zealand

      - many different families
      - each product has pros
      - ... and heavy cons

  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/the-seasons.jpeg',
               :style=>'position:absolute; top: 100px; left: 600px;', :width=>'300'}

%section 
  :markdown
    ## Relational DBMS

    OracleDB, PostgreSQL, MySQL, SQLServer, H2

  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/rdbms.png', :width=>'450'}


%section 
  :markdown
    ## Key/Value stores and data grids

    Infinispan, Redis, Riak, Voldemort

  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/key-value.png', :width=>'700'}

%section 
  :markdown
    ## Document-oriented data stores

    MongoDB, CouchDB

  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/document.png', :width=>'300'}

%section
  :markdown
    ## Graph-oriented databases

    Neo4j

  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/graph.png', :width=>'700'}

%section 
  :markdown
    ## (Mixed or) Column oriented DB

    Cassandra, HBase, BigTable

  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/google-bigtable.jpg', :width=>'700'}

%section 
  :markdown
    ## Hadoop

    Mainly analytics and batch processing

    - huge ecosystem
    - many different tools
    
  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/big-data.jpeg',
               :style=>'position:absolute; top: 150px; left: 600px;', :width=>'500'}

%section
  %h2 JBoss data tech at a glance

  %img.diagram{ :src=>'/assets/nosql-and-bigdata-at-redhat/tech-overview.png',
                :width=>'500' }

%section
  :markdown
    ## Hibernate ORM

    - Object/Relational mapper
    - Implements JPA

    - Defines object state
      - ORM does the SQL action
    - Optimization goodies
      - 1st and 2nd level cache
      - Lower lock period

%section
  :markdown
    ## Hibernate OGM

    - JPA for NoSQL
      - Infinispan, EHCache, MongoDB
      - Cassandra, Neo4J and others coming soon
      - JP-QL querying too

    - Familiar API
    - Declarative denormalization
    - Domain model centric apps

%section
  :markdown
    ## Hibernate Search

    - Full-text search engine
      - Fuzzy, n-gram, phonetic search
      - Object-oriented level
      - Annotation driven
    - Uses Lucene underneath
      - Optionally stores indexes in Infinispan
    - Optimizes Lucene access patterns

%section
  :markdown
    ## Contexts and Dependency Injection (CDI)

    - Programming model
      - Java EE
      - Portable extentions
    - Offer integration with data technologies

    - DeltaSpike and JBoss Developer Framework

%section
  :markdown
    ## Infinispan and the JBoss Data Grid

    - Distributed data grid
    - Strongly consistent
      - Full XA support
      - Eventually consistent mode on the roadmap
    - Often used in front of a RDBMS
      - But also used as a system of record

%section
  :markdown
    ## Infinispan and the JBoss Data Grid

    - In-memory
      - Fast, low-latency data access
    - Distributed
      - Fault tolerant, highly available    
    - Persistent
      - Write-through or write-behind to persistent storage
    - Embedded or client/server

%section
  :markdown
    ## Drools and BRMS

    Unified platform for

    - Rules
    - Workflow
    - Event processing and temporal reasoning

%section
  :markdown
    ## ModeShape

    - Java Content Repository (JCR) abstraction over data stored in:
      - File systems
      - Relational database
      - Other repositories
    - Federates multiple backends
    - Can store data in Infinispan
      - Distribution and scalability

%section
  :markdown
    ## JBoss Transaction

    - Rock-solid transaction manager

    - JTA and beyond
      - WS-* about transaction
      - Android ?!

    - For both Java EE containers (like JBoss AS) and standalone use

%section
  :markdown
    ## Teiid - JBoss Data Services
    
    - Data virtualization
      - One logical relational view
      - Several physical datasources
      - Read and write
    - Multiple connectors
      - JDBC
      - Web Services
      - CSV, XML
    <img height="300" width="400" style="position:relative;left:250px;top:-220px;" 
    src="/assets/nosql-and-bigdata-at-redhat/teiid-schema.png">

%section
  :markdown
    ## Third party technologies

    JBoss does not live in isolation
    
    - JClouds
    - Cassandra
    - HBase
    - Lucene

%section
  %h2 Changing gears ... 
  %img.diagram{ :src=>'/assets/nosql-and-bigdata-at-redhat/changing_gears.jpeg',
                :style=>'border:0; background: transparent; -webkit-box-shadow:0 0 0px; box-shadow: 0 0 0px;',
                :width=>'500' }

%section
  :markdown
    ## Writing through to Cassandra

    __The Problem:__

    - Need low-latency data access
    - Data store should be transactional
      - OLTP
    - Data store should be queryable
    - Data store should also support OLAP data mining

%section
  :markdown
    ## Writing through to Cassandra

    __The Solution:__

    - Infinispan as the main key/value store
      - Transactional, queryable
    - Infinispan configured to write-through to Cassandra
      - Could be write-behind as well
      - Cassandra queried directly for OLAP/data mining workloads

%section
  :markdown
    ## Storing domain objects in NoSQL

    __The Problem:__

    - Want to explore NoSQL and try MongoDB first
    - Programming paradigm change is costly
    - Need advanced queries too

%section
  :markdown
    ## Storing domain objects in NoSQL

    __The solution:__

    - Use CDI as the component model
    - Use Hibernate OGM as the JPA implementor
    - Use Hibernate Search to index and query content

%section
  %h2 An entity in MongoDB
  %pre.prettyprint
    %code.language-java
      :escaped
          @Entity @Indexed 
        class User {
          @Id @GeneratedValue String uuid;
          @Field String firstname;
          @Field String lastname;
          @ElementCollection @IndexedEmbedded
          Set<Login> services;
        }
  %pre.prettyprint
    %code.language-javascript
      :escaped
          {
          "_id": "550e8400-e29b-41d4-a716-446655440000",
          "firstname": "Emmanuel",
          "lastname": "Bernard",
          "nicknames": [
            {
              "username": "emmanuelbernard",
              "service": "GitHub"
            },
            {
              "username": "emmanuelbernard",
              "service": "Twitter"
            }
          ]
        }

%section
  %h2 An query with Hibernate Search
  %pre.prettyprint
    %code.language-java
      :escaped
          Query query = builder
        .bool()
          .should(
            builder.keyword()
              .fuzzy().onField("firstname")
              .matching("Emanuel")
              .createQuery()
          )
          .must(
            builder.spatial()
              .onCoordinates( "location" )
              .within( 51, Unit.KM )
                .ofCoordinates( coordinates )
              .createQuery()
          )
          .createQuery();

        List results = fullTextSession.createFullTextQuery( query, User.class ).list();

%section
  :markdown
    ## Complex event processing

    __The Problem:__

    - Large stream of incoming data to be captured
    - Data to be filtered based on business rules
      - Rules may change dynamically
    - React to changes in data, store relevant data

%section
  :markdown
    ## Complex event processing

    __The Solution:__

    - Data feed directly populates an Infinispan grid
      - Fast writes, data stored in memory
    - Infinispan set up to notify a Drools instance of data changes
      - Drools contains business rules, triggers fired
      - Drools filters out unnecessary data
    - Useful data pushed to a second Infinispan grid asynchronously
      - Second grid configured to persist, to maintain record

%section
  :markdown
    ## Accessing disparate sources of data

    __The Problem:__

    - Data spread across several RDBMSs
      - Historical silo development

%section
  :markdown
    ## Accessing disparate sources of data

    __The solution:__

    - Use data virtualization (Teiid) to unify data
    - Use Hibernate ORM to access this virtual database

%section
  %h2 Accessing disparate sources of data
  %img.diagram{:src=>'/assets/nosql-and-bigdata-at-redhat/teiid-usecase.png',
      :width=>'350' }

%section
  %img.diagram(src="#{site.base_url}/images/subscriptions.png" width="800")

%section
  %img.diagram(src="/assets/nosql-and-bigdata-at-redhat/thatsallfolks.jpeg")


