---
title: NoSQL & Big Data at Red Hat
author: Emmanuel Bernard, Manik Surtani
description: An overview of NoSQL and BigData in the Red Hat ecosystem

layout: reveal
---

%section
  %img.splash(src="#{site.base_url}/images/summit.png")

%section
  %h2 NoSQL & Big Data 
  %h3 at Red Hat
  %br
  %p June 2012
  %ul.intro
    %li 
      Manik Surtani 
      %ul 
        %li Hacker, Red Hat, Inc.
    %li 
      Emmanuel Bernard 
      %ul
        %li Hacker, Red Hat, Inc.

%section
  %h2 Middleware is plumbing
  %blockquote
    :markdown
      Middleware is about assembling pipes of data together.

      In an hour, you should have an good overview of Red Hat's plumbing offering
      around NoSQL and Big Data. We will also discuss specific examples.

%section
  :markdown
    ## Emmanuel Bernard

    - Serial OSS entrepreneur
      - Hibernate Search|OGM|Validator
      - Ceylon
    - Standardizer
    - Podcaster
      - <http://asylum.jboss.org>
      - <http://lescastcodeurs.com>

    - The rest at [@emmanuelbernard](http://twitter/emmanuelbernard) or <http://emmanuelbernard.com>

%section
  :markdown
    ## Manik Surtani

    - Data grids
      - Founder and Project Lead, Infinispan
      - JBoss Data Grid Platform Architect
    - Standards
      - Spec Lead, JSR 347
      - Expert group member, JSR 107
    - Contact
      - __@maniksurtani__ on Twitter
      - http://blog.infinispan.org
      - http://manik.surtani.org

%section
  :markdown
    ## Agenda 

    - What is NoSQL?
    - Landscape of data storage
    - The JBoss data technology
    - Exploring 5 use cases

%section
  :markdown
    ## A brief history of storage

    - Disk space was once expensive!
    - RDBMS normal forms
    - Based on relational set theory
      - Strong mathematical background

%section
  :markdown
    ## But the world has changed!

      - Disks are cheap!
        - ... so is memory.
      - High availability and scalability are important
        - pushed further by cloud
      - Relational model never sat well with OOP anyway
        - Hence the (very useful) _hack_ that we call ORM

%section
  :markdown
    ## Scaling RDBMSs are _hard_

    - The relational model was not designed to be distributed
    - Maintaining coherence and consistency is very hard
    - You can only go so far scaling vertically
      - At some point you need to scale horizontally    

%section
  :markdown
    ## Pacemakers to the RDBMS

    - Caches (local or distributed)
      - Only helps scale reads, not writes
    - Sharding
      - Pushes a lot of complexity into the application
      - Cross-shard queries become problematic

%section
  :markdown
    ## Why do people use NoSQL?

    - Horizontal scalability
      - Scale capacity
      - Scale performance    
    - High availability
      - If distributed
    - Flexible (soft) schema
      - Often denormalized

%section
  :markdown
    ## Consistency models

    - Strong (transactional)
      - RDBMSs
      - Data Grids
    - Eventual
      - Many NoSQL engines
      - Some data grids

%section
  :markdown
    ## Brewer's CAP theorem

    (explain)

%section 
  :markdown
    ## The (No)SQL landscape

    TODO: use diagram for:

    - RDBMSs
    - Column oriented DB

    __For Emmanuel__

%section 
  :markdown
    ## The (No)SQL landscape

    TODO: use diagram for:

    - key / value
    - document oriented DB

    __For Emmanuel__

%section 
  :markdown
    ## The (No)SQL landscape

    TODO: use diagram for:

    - GraphDB
    - Hadoop ????

    __For Emmanuel__

%section
  :markdown
    ## JBoss data tech at a glance

    __TODO: put a diagram here__

%section
  :markdown
    ## Hibernate ORM

    - Object/Relational mapper
    - Implements JPA

    - Defines object state
      - ORM does the SQL action
    - Optimization goodies
      - 1st and 2nd levle cache
      - lower lock period

%section
  :markdown
    ## Hibernate OGM

    - JPA for NoSQL
      - Infinispan, EHCache, MongoDB
      - Cassandra, Neo4J etc coming
      - queries too

    - Familiar API
    - Declarative denormalization
    - Domain model centric apps

%section
  :markdown
    ## Hibernate Search

    - Full-text search engine
      - fuzzy, ngram, phonetic search
      - Object-oriented level
      - annotation driven
    - Uses Lucene underneath
      - optionally store index in Infinispan
    - Optimizes Lucene access patterns

%section
  :markdown
    ## CDI

    - Programming model
      - Java EE
      - portable extentions
    - Offer integration with data technologies

%section
  :markdown
    ## Infinispan and the JBoss Data Grid

    - Distributed data grid
    - Strongly consistent
      - Full XA support
      - Eventually consistent mode on the roadmap
    - Often used in front of a RDBMS
      - But also used as a store of record

%section
  :markdown
    ## Infinispan and the JBoss Data Grid

    - In-memory
      - Fast, low-latency data access
    - Distributed
      - Fault tolerant, highly available    
    - Persistent
      - Write-through or write-behind to persistent storage
    - Embedded or client/server

%section
  :markdown
    ## Drools and BRMS

    Unified platform for

    - rules
    - workflow
    - event processing / temporal reasoning

%section
  :markdown
    ## ModeShape

    - JCR view of your information
      - file systems
      - database
      - other repositories
    - Federates multiple backends
    - Can store data in Infinispan
      - distribution and scalability

%section
  :markdown
    ## JBoss Transaction

    - Rock-solid transaction manager

    - JTA and beyond
      - WS-* about transaction
      - Android ?!

    - In container and standalone

%section
  :markdown
    ## Teiid

    - Data virtualization
      - one logical relational view
      - several physical datasources
      - read and write
    - Multiple connectors
      - JDBC
      - Web Services
      - CSV


%section
  :markdown
    ## Third party technologies

    - JBoss does not live in isolation

    - JClouds

              Integrate with other techs

%section
  :markdown
    ## Writing through to Cassandra

    __The Problem:__

    - Need low-latency data access
    - Data store should be transactional
      - OLTP
    - Data store should be queryable
    - Data store should also support OLAP data mining

%section
  :markdown
    ## Writing through to Cassandra

    __The Solution:__

    - Infinispan as the main key/value store
      - Transactional, queryable
    - Infinispan configured to write-through to Cassandra
      - Could be write-behind as well
      - Cassandra queried directly for OLAP/data mining workloads

%section
  :markdown
    ## Complex event processing

    __The Problem:__

    - Large stream of incoming data to be captured
    - Data to be filtered based on business rules
      - Rules may change dynamically
    - React to changes in data, store relevant data

%section
  :markdown
    ## Complex event processing

    __The Solution:__

    - Data feed directly populates an Infinispan grid
      - Fast writes, data stored in memory
    - Infinispan set up to notify a Drools instance of data changes
      - Drools contains business rules, triggers fired
      - Drools filters out unnecessary data
    - Useful data pushed to a second Infinispan grid asynchronously
      - Second grid configured to persist, to maintain record

%section
  :markdown
    ## End of presentation

    - this is where the presentation end
    - and Pete presentation start

%section
  %h2 Test of code
  %pre.prettyprint
    %code.language-java
      :escaped
          class MyClass {
          private String test;
        }


%section
  %h2 Architecture
  %img.diagram(src="#{site.base_url}/images/ticketmonster_architecture.png" width="800")

%section
  %h2 Tools Overview
  %ul
    %li JBDS 5
    %li Forge

%section
  %h2 Demo

%section 
  %h2 End-user use cases
  %img.diagram(src="#{site.base_url}/images/user_use_cases.png" width="800")

%section 
  %h2 Administration use cases
  %img.diagram(src="#{site.base_url}/images/admin_use_cases.png" width="800")

%section
  %h2 HTML5 Architecture
  %img.diagram(src="#{site.base_url}/images/ticketmonster_html5_architecture.png" width="800")

%section
  %h2 Demo deep dive

%section
  %h2.bottom.red Can I get support?

%section
  %img.bottom(src="#{site.base_url}/images/as7_to_eap.png" width="800")

%section
  %img.diagram(src="#{site.base_url}/images/subscriptions.png" width="800")

%section
  %h2 Q&A
  %ul
    %li
      %a(href="http://jboss.org/developer") http://jboss.org/developer
    %li
      %a(href="http://jboss.org/jdf") http://jboss.org/jdf
    %li
      %a(href="https://twitter.com/#!/jbossdeveloper") @jbossdeveloper
